//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Daten\GITHUB\Yaapii.Xambly\src\Yaapii.Xambly\\Antlr4\Xambly.g by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Xml;
using Yaapii.Atoms;
using Yaapii.Atoms.Text;
using Yaapii.Xambly;
using Yaapii.Xambly.Arg;
using Yaapii.Xambly.Error;
using Yaapii.Xambly.Directive;

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class XamblyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, DIGIT=15, COMMA=16, COLON=17, 
		SEMICOLON=18, TEXT=19, SPACE=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "DIGIT", "COMMA", "COLON", 
		"SEMICOLON", "TEXT", "SPACE"
	};


	    public void emitErrorMessage(String msg) {
	        throw new ParsingException(msg);
	    }


	public XamblyLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'XPATH'", "'SET'", "'XSET'", "'ATTR'", "'ADD'", "'ADDIF'", "'REMOVE'", 
		"'STRICT'", "'UP'", "'PI'", "'NS'", "'PUSH'", "'POP'", "'CDATA'", null, 
		"','", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "DIGIT", "COMMA", "COLON", "SEMICOLON", "TEXT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Xambly.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static XamblyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 18 : TEXT_action(_localctx, actionIndex); break;
		case 19 : SPACE_action(_localctx, actionIndex); break;
		}
	}
	private void TEXT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
		        try {
		            this.Text = new Unescaped(this.Text).AsString();
		        } catch (XmlException ex) {
		            throw new ParsingException(ex);
		        }
		     break;
		case 1: 
		        try {
		            this.Text = new Unescaped(this.Text).AsString();
		        } catch (XmlException ex) {
		            throw new ParsingException(ex);
		        }
		     break;
		}
	}
	private void SPACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:  this.Skip();  break;
		}
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x16");
		sb.Append("\x92\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3");
		sb.Append("\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3");
		sb.Append("\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\a\x14z\n\x14\f\x14\xE\x14}\v\x14\x3\x14\x3\x14");
		sb.Append("\x3\x14\x3\x14\a\x14\x83\n\x14\f\x14\xE\x14\x86\v\x14\x3\x14");
		sb.Append("\x3\x14\x5\x14\x8A\n\x14\x3\x15\x6\x15\x8D\n\x15\r\x15\xE\x15");
		sb.Append("\x8E\x3\x15\x3\x15\x2\x2\x16\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF");
		sb.Append("\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12");
		sb.Append("#\x13%\x14\'\x15)\x16\x3\x2\x5\x3\x2$$\x3\x2))\x5\x2\v\f\xF");
		sb.Append("\xF\"\"\x95\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2");
		sb.Append("\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF");
		sb.Append("\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3");
		sb.Append("\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2");
		sb.Append("\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2");
		sb.Append("\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2");
		sb.Append("\x2\x2\x3+\x3\x2\x2\x2\x5\x31\x3\x2\x2\x2\a\x35\x3\x2\x2\x2");
		sb.Append("\t:\x3\x2\x2\x2\v?\x3\x2\x2\x2\r\x43\x3\x2\x2\x2\xFI\x3\x2\x2");
		sb.Append("\x2\x11P\x3\x2\x2\x2\x13W\x3\x2\x2\x2\x15Z\x3\x2\x2\x2\x17]");
		sb.Append("\x3\x2\x2\x2\x19`\x3\x2\x2\x2\x1B\x65\x3\x2\x2\x2\x1Di\x3\x2");
		sb.Append("\x2\x2\x1Fo\x3\x2\x2\x2!q\x3\x2\x2\x2#s\x3\x2\x2\x2%u\x3\x2");
		sb.Append("\x2\x2\'\x89\x3\x2\x2\x2)\x8C\x3\x2\x2\x2+,\aZ\x2\x2,-\aR\x2");
		sb.Append("\x2-.\a\x43\x2\x2./\aV\x2\x2/\x30\aJ\x2\x2\x30\x4\x3\x2\x2\x2");
		sb.Append("\x31\x32\aU\x2\x2\x32\x33\aG\x2\x2\x33\x34\aV\x2\x2\x34\x6\x3");
		sb.Append("\x2\x2\x2\x35\x36\aZ\x2\x2\x36\x37\aU\x2\x2\x37\x38\aG\x2\x2");
		sb.Append("\x38\x39\aV\x2\x2\x39\b\x3\x2\x2\x2:;\a\x43\x2\x2;<\aV\x2\x2");
		sb.Append("<=\aV\x2\x2=>\aT\x2\x2>\n\x3\x2\x2\x2?@\a\x43\x2\x2@\x41\a\x46");
		sb.Append("\x2\x2\x41\x42\a\x46\x2\x2\x42\f\x3\x2\x2\x2\x43\x44\a\x43\x2");
		sb.Append("\x2\x44\x45\a\x46\x2\x2\x45\x46\a\x46\x2\x2\x46G\aK\x2\x2GH");
		sb.Append("\aH\x2\x2H\xE\x3\x2\x2\x2IJ\aT\x2\x2JK\aG\x2\x2KL\aO\x2\x2L");
		sb.Append("M\aQ\x2\x2MN\aX\x2\x2NO\aG\x2\x2O\x10\x3\x2\x2\x2PQ\aU\x2\x2");
		sb.Append("QR\aV\x2\x2RS\aT\x2\x2ST\aK\x2\x2TU\a\x45\x2\x2UV\aV\x2\x2V");
		sb.Append("\x12\x3\x2\x2\x2WX\aW\x2\x2XY\aR\x2\x2Y\x14\x3\x2\x2\x2Z[\a");
		sb.Append("R\x2\x2[\\\aK\x2\x2\\\x16\x3\x2\x2\x2]^\aP\x2\x2^_\aU\x2\x2");
		sb.Append("_\x18\x3\x2\x2\x2`\x61\aR\x2\x2\x61\x62\aW\x2\x2\x62\x63\aU");
		sb.Append("\x2\x2\x63\x64\aJ\x2\x2\x64\x1A\x3\x2\x2\x2\x65\x66\aR\x2\x2");
		sb.Append("\x66g\aQ\x2\x2gh\aR\x2\x2h\x1C\x3\x2\x2\x2ij\a\x45\x2\x2jk\a");
		sb.Append("\x46\x2\x2kl\a\x43\x2\x2lm\aV\x2\x2mn\a\x43\x2\x2n\x1E\x3\x2");
		sb.Append("\x2\x2op\x4\x32;\x2p \x3\x2\x2\x2qr\a.\x2\x2r\"\x3\x2\x2\x2");
		sb.Append("st\a<\x2\x2t$\x3\x2\x2\x2uv\a=\x2\x2v&\x3\x2\x2\x2w{\a$\x2\x2");
		sb.Append("xz\n\x2\x2\x2yx\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3");
		sb.Append("\x2\x2\x2|~\x3\x2\x2\x2}{\x3\x2\x2\x2~\x7F\a$\x2\x2\x7F\x8A");
		sb.Append("\b\x14\x2\x2\x80\x84\a)\x2\x2\x81\x83\n\x3\x2\x2\x82\x81\x3");
		sb.Append("\x2\x2\x2\x83\x86\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x85\x3");
		sb.Append("\x2\x2\x2\x85\x87\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x87\x88\a");
		sb.Append(")\x2\x2\x88\x8A\b\x14\x3\x2\x89w\x3\x2\x2\x2\x89\x80\x3\x2\x2");
		sb.Append("\x2\x8A(\x3\x2\x2\x2\x8B\x8D\t\x4\x2\x2\x8C\x8B\x3\x2\x2\x2");
		sb.Append("\x8D\x8E\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2");
		sb.Append("\x8F\x90\x3\x2\x2\x2\x90\x91\b\x15\x4\x2\x91*\x3\x2\x2\x2\a");
		sb.Append("\x2{\x84\x89\x8E\x5\x3\x14\x2\x3\x14\x3\x3\x15\x4");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
